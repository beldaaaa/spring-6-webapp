package springframework.spring6webapp.domain;

import jakarta.persistence.*;

import java.util.HashSet;
import java.util.Set;

@Entity
//if we use Jakarta persistence, this tells JPA this is going to be an entity persisted to DB

//@Entity annotation defines that a class can be mapped to a table. And that is it, it is just a marker,
// like for example Serializable interface.
//And why @Entity annotation is mandatory? ... well, it is the way how JPA is designed.
//When you create a new entity you have to do at least two things:
    // 1) annotated it with @Entity
    // 2)create an id field and annotate it with @Id
//Anything else is optional, for example table name is derived from entity class name
//(and therefore @Table annotation can be optional), table's columns are derived from
// entities variables (and therefore @Column annotation can be optional), and so on ...

//Every instance of an entity represents a row in the table.
public class Author {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO) //in a lesson he had to those 2 annotations because Author
    //was red, so this says ID is going to by generated by DB, H2 has autoincrement
    private Long id;
    private String firstName;
    private String lastName;
    @ManyToMany(mappedBy = "authors")//Author-Book relation will be many to many (author can have many books and ...)
    private Set<Book> books = new HashSet<>();

    public Long getId() {
        return id;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public Set<Book> getBooks() {
        return books;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public void setBooks(Set<Book> books) {
        this.books = books;
    }

    @Override
    public String toString() {
        return "Author{" +
                "id=" + id +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", books=" + books +
                '}';
    }

    //in this example I am comparing only by Long id, not by entire class so only id is involved
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Author author)) return false;

        return getId() != null ? getId().equals(author.getId()) : author.getId() == null;
    }

    @Override
    public int hashCode() {
        return getId() != null ? getId().hashCode() : 0;
    }
}
